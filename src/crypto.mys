# pylint:disable=unused-argument

c"""source-before-namespace
#include <random>
"""

c"""
static std::random_device device;
"""

func random() -> f64:
    """Returns a cryptographically safe random floating point number in
    the range [0.0, 1.0] (inclusive).

    """

    value: f64 = 0.0

    c"""
    std::uniform_real_distribution<f64> distribution(0.0, 1.0);

    value = distribution(device)
    """

    return value

func randint(minimum: i64, maximum: i64) -> i64:
    """Returns a cryptographically safe random integer number in the range
    [minimum, maximum] (inclusive).

    """

    value: i64 = 0

    c"""
    std::uniform_int_distribution<i64> distribution(minimum, maximum);

    value = distribution(device)
    """

    return value

func randfloat(minimum: f64, maximum: f64) -> f64:
    """Returns a cryptographically safe random floating point number in
    the range [minimum, maximum] (inclusive).

    """

    value: f64 = 0.0

    c"""
    std::uniform_real_distribution<f64> distribution(minimum, maximum);

    value = distribution(device)
    """

    return value

func randbytes(length: u32) -> bytes:
    """Returns given number of cryptographically safe random bytes.

    """

    value = b""

    for i in range(i64(length)):
        value += u8(randint(0, 255))

    return value

@generic(T)
func shuffle(values: [T]):
    """Shuffle the values in place.

    """

    length = i64(len(values))

    for current in range(length):
        other = randint(0, length - 1)
        value = values[current]
        values[current] = values[other]
        values[other] = value

test random():
    value = random()
    assert value >= 0.0
    assert value <= 1.0

test randint():
    value = randint(-1, 2)
    assert value >= -1
    assert value <= 2
    values: [i64] = [-1, 0, 1, 2]
    assert value in values

test randfloat():
    value = randfloat(-2.5, 2.0)
    assert value >= -2.51
    assert value <= 2.01

test randbytes():
    assert len(randbytes(0)) == 0
    assert len(randbytes(5)) == 5

test shuffle():
    values = [1, 2, 3]

    while True:
        shuffle[i64](values)

        if values != [1, 2, 3]:
            break
